package ballworlds;

import java.awt.Color;
import java.awt.Shape;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;

import util.Random;

public class Rectangle extends Ball {

	private double xvelocity;
	private double yvelocity;
	private double radius;

	public Rectangle(BallEnvironment world) {
		super(world);
		Point2D centerPoint = new Point2D.Double(this.getWorld().getSize().getWidth() / 2,
				this.getWorld().getSize().getHeight() / 2);
		this.setCenterPoint(centerPoint);
		// set initial velocities and let them be not 0 at the same time.
		this.xvelocity = Random.randRange(-500, 500) / 100;
		this.yvelocity = Random.randRange(-500, 500) / 100;
		while (this.xvelocity == 0 && this.yvelocity == 0) {
			this.xvelocity = Random.randRange(-500, 500) / 100;
			this.yvelocity = Random.randRange(-500, 500) / 100;
		}
		this.radius=20;
	}

	@Override
	public Shape getShape() {
		double x = getCenterPoint().getX();
		double y = getCenterPoint().getY();
		double size = getDiameter();
		return new Rectangle2D.Double(x - size / 2, y - size / 2, size, size);
	}

	@Override
	public Color getColor() {
		return Color.pink;
	}

	@Override
	public void updatePosition() {
		Point2D movingCenter = new Point2D.Double(this.getCenterPoint().getX() + this.xvelocity,
				this.getCenterPoint().getY() + this.yvelocity);
		this.setCenterPoint(movingCenter);
		stayOnEdge();
	}

	@Override
	public void updateSize() {
		// TODO Auto-generated method stub.

	}

	@Override
	public void updateColor() {
		// TODO Auto-generated method stub.

	}

	@Override
	public double getDiameter() {
		return 2*this.radius;
	}

	public void stayOnEdge() {
		// changes point interacting with edge to point on circumference of
		// circle rather than center.
		double edgeX = 0;
		double edgeY = 0;
		if (this.xvelocity > 0 && this.yvelocity > 0) {
			edgeX = this.radius;
			edgeY = this.radius;
		} else if (this.xvelocity > 0) {
			edgeX = this.radius;
			edgeY = -this.radius;
		} else if (this.yvelocity > 0) {
			edgeX = -this.radius;
			edgeY = this.radius;
		} else {
			edgeX = -this.radius;
			edgeY = -this.radius;
		}
		// bounce off
		Point2D edgePoint = new Point2D.Double(this.getCenterPoint().getX() + edgeX,
				this.getCenterPoint().getY() + edgeY);
		if (!this.getWorld().isInsideWorldY(edgePoint) || !this.getWorld().isInsideWorldX(edgePoint)) {
			this.xvelocity = 0;
			this.yvelocity = 0;
		}
		
	}

}
